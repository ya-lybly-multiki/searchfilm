{"version":3,"sources":["Api/Api.tsx","Redux/ErrorReducer.ts","Redux/SearchSingleReducer.ts","Components/Utils/SuperInput/SuperInput.tsx","Components/Utils/SuperButton/SuperButton.tsx","Components/Search/SearchSingleFilm/SearchSingleFilm.tsx","Redux/SearchAllReducer.ts","Components/Search/SearchAllFilms/SearchAllFilms.tsx","Components/Header/Header.tsx","Components/MainContent/FilmItem/FilmItem.tsx","Image/Preloader/Spinner-1s-200px.svg","Components/Utils/Preloader/Prealoader.tsx","Components/MainContent/SingleFilmItem/SingleFilmItem.tsx","Components/Error/Error.tsx","Components/MainContent/Main.tsx","App.tsx","reportWebVitals.ts","Redux/Store.ts","index.tsx","Components/MainContent/Main.module.scss","Components/Search/SearchSingleFilm/SearchSingle.module.scss","Components/Search/SearchAllFilms/SearchAllFilms.module.scss","Components/Header/Header.module.scss","Components/Error/Error.module.scss"],"names":["apiKey","instance","axios","create","baseURL","filmApi","title","get","initialState","isLoading","isError","statusGetFilms","setStatusGetFilms","statusResponse","type","setErrorStatusAC","SuperInput","setTitleInput","callBack","dispatch","useDispatch","error","useSelector","state","errorReducer","TextField","autoFocus","value","onChange","e","currentTarget","helperText","label","onKeyPress","key","SuperButton","children","Button","size","color","onClick","SearchSingleFilm","useState","titleInput","onClickHandler","then","data","Response","film","catch","className","s","SearchSingleWrapper","SearchAllFilms","films","Search","SearchAllWrapper","Header","HeaderWrapper","FilmItem","movie","Title","src","Poster","overview","Year","target","href","imdbID","Prealoader","Preload","SingleFilmItem","filmSearch","Plot","Error","open","setOpen","ErrorWrapper","Main","search","status","mainWrapper","map","index","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","isLoad","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.4b6e23d8.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst apiKey = '?apikey=353f5b2c'\n\nconst instance = axios.create({\n    baseURL:\"https://www.omdbapi.com/\"\n})\n\nexport const filmApi = {\n    getAllFilms (title:string | null) {\n        return instance.get<ArrayFilmsType>(`${apiKey}&s=${title}`)\n    },\n    getFilmByTitle(title: string | null) {\n        return instance.get<FilmType>(`${apiKey}&t=${title}`)\n    },\n}\n\nexport type FilmType = {\n    \"Title\": string,\n    \"Year\": string,\n    \"Rated\": string,\n    \"Released\": string,\n    \"Runtime\": string,\n    \"Genre\": string,\n    \"Director\": string,\n    \"Writer\": string,\n    \"Actors\": string,\n    \"Plot\": string,\n    \"Language\": string,\n    \"Country\": string,\n    \"Awards\": string,\n    \"Poster\": string,\n    \"Metascore\": string,\n    \"imdbRating\": string,\n    \"imdbVotes\": string,\n    \"imdbID\": string,\n    \"Type\": string,\n    \"DVD\": string,\n    \"BoxOffice\": string,\n    \"Production\": string,\n    \"Website\": string,\n    \"Response\": string\n}\n\ntype ArrayFilmsType = {\n    \"Search\": [\n        {\n            \"Title\": string,\n            \"Year\": string,\n            \"imdbID\": string,\n            \"Type\": string,\n            \"Poster\": string\n        }\n    ],\n    \"totalResults\": string,\n    \"Response\": string\n}","\n\nexport type InitialStateType = {\n    isLoading: boolean\n    isError: string | null\n    statusGetFilms: 'success' | 'loading' | 'failed' | 'idle'\n}\n\nconst initialState: InitialStateType = {\n    isLoading: false,\n    isError:null,\n    statusGetFilms: \"idle\"\n}\n\n\nexport const ErrorReducer = (state = initialState, action: GlobalType): InitialStateType => {\n    switch (action.type) {\n        case \"SET-STATUS-GET-FILMS\":\n            return {...state, statusGetFilms:action.statusResponse}\n        case \"STATUS-LOADING\":\n            return {...state, isLoading:action.isLoad}\n        case \"STATUS-ERROR\":\n            return {...state,isError:action.isError}\n        default :\n            return state\n    }\n}\n\n\nexport const setStatusGetFilms = ( statusResponse: 'success' | 'loading' | 'failed' | 'idle') =>\n    ({type: 'SET-STATUS-GET-FILMS', statusResponse} as const)\n\nexport const setStatusLoadingAC = (isLoad: boolean) => ({type: 'STATUS-LOADING', isLoad} as const)\nexport const setErrorStatusAC = (isError: string | null) => ({type: 'STATUS-ERROR', isError} as const)\n\nexport type SetStatusType = ReturnType<typeof setStatusGetFilms>\nexport type LoadingType = ReturnType<typeof setStatusLoadingAC>\nexport type ErrorType = ReturnType<typeof setErrorStatusAC>\n\n\ntype GlobalType =\n    | SetStatusType | LoadingType | ErrorType\n","import {filmApi, FilmType} from \"../Api/Api\";\nimport {getAllFilms,  GetFilmType} from \"./SearchAllReducer\";\n\nimport {AppThunk} from \"./Store\";\nimport {ErrorType, setErrorStatusAC, setStatusGetFilms, SetStatusType} from \"./ErrorReducer\";\n\n\nconst initialState: FilmType = {} as FilmType\n\nexport const SearchSingleReducer = (state = initialState, action: GlobalType): FilmType => {\n    switch (action.type) {\n        case \"GET-FILM\":\n            return {\n                ...state,\n                ...action.film\n            }\n        default :\n            return state\n    }\n}\n\n\nexport const getFilm = (film: FilmType) => {\n    return {\n        type: \"GET-FILM\",\n        film\n    } as const\n}\n\n\nexport const getFilmByTitle = (title: string):AppThunk => {\n    return (dispatch) => {\n        dispatch(setStatusGetFilms(\"loading\"))\n        filmApi.getFilmByTitle(title)\n            .then(data => {\n                if (data.data.Response === 'True') {\n                    dispatch(setStatusGetFilms(\"success\"))\n                    dispatch(getFilm(data.data))\n                } else  {\n                    dispatch(setStatusGetFilms('failed'))\n                    dispatch(setErrorStatusAC('incorrect request'))\n                }\n            })\n            .catch(() => {\n                dispatch(setStatusGetFilms('failed'))\n                dispatch(setErrorStatusAC('Какая-то неведанная ошибка'))\n            })\n    }\n}\n\nexport type GetFilmByTitleType = ReturnType<typeof getFilm>\ntype GlobalType =\n    | SetStatusType\n    | GetFilmByTitleType\n    | GetFilmType\n    |ErrorType","import React, {ChangeEvent} from 'react';\nimport {TextField} from \"@mui/material\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {IblobalStore} from \"../../../Redux/Store\";\nimport {setErrorStatusAC} from \"../../../Redux/ErrorReducer\";\n\ntype PropsType = {\n    setTitleInput: (title: string) => void\n    title: string\n    callBack: () => void\n}\nconst SuperInput = ({setTitleInput, title, callBack}: PropsType) => {\n\n    const dispatch = useDispatch()\n    const error = useSelector<IblobalStore, string | null>( (state)=> state.errorReducer.isError)\n\n    const onchangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitleInput(e.currentTarget.value)\n    }\n    const clickHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n           dispatch(setErrorStatusAC(null))\n        }\n        if (e.key === 'Enter') {\n            callBack()\n            setTitleInput('')\n        }\n    }\n    return (\n        <TextField\n            autoFocus\n            value={title}\n            onChange={onchangeHandler}\n            helperText={error}\n            label=\"Film\"\n            onKeyPress={clickHandler}\n            error={!!error}\n        />\n    );\n};\n\nexport default SuperInput;","import React from 'react';\nimport {Button} from \"@mui/material\";\n\ntype Iprops = {\n    children:string\n    callBack:()=>void\n}\n\n\nconst SuperButton = ({children,callBack}:Iprops) => {\n    return (\n       <Button size={'large'} color={'inherit'} onClick={callBack}>{children}</Button>\n    );\n};\n\nexport default SuperButton;","import React, {useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {getFilmByTitle} from \"../../../Redux/SearchSingleReducer\";\nimport SuperInput from \"../../Utils/SuperInput/SuperInput\";\nimport SuperButton from \"../../Utils/SuperButton/SuperButton\";\nimport {setErrorStatusAC} from \"../../../Redux/ErrorReducer\";\nimport s from './SearchSingle.module.scss'\nimport {getAllFilms} from \"../../../Redux/SearchAllReducer\";\n\n\nexport const SearchSingleFilm = () => {\n\n    const [titleInput, setTitleInput] = useState<string>('')\n    const dispatch = useDispatch()\n\n\n\n    const onClickHandler = () => {\n        if (titleInput !== '') {\n            dispatch(getFilmByTitle(titleInput))\n            setTitleInput(\"\")\n        } else {\n           dispatch(setErrorStatusAC('Title is required'))\n        }\n    }\n\n\n    return (\n        <>\n            <div className={s.SearchSingleWrapper}>\n                <p>Find single film</p>\n                <div>\n                    <SuperInput setTitleInput={setTitleInput}\n                                title={titleInput}\n                                callBack={onClickHandler}/>\n                    <SuperButton children={\"Click\"} callBack={onClickHandler}/>\n                </div>\n            </div>\n        </>\n\n    )\n}","import {Dispatch} from \"react\";\nimport {filmApi} from \"../Api/Api\";\nimport {ErrorType, setErrorStatusAC, setStatusGetFilms, SetStatusType} from \"./ErrorReducer\";\nimport { getFilmByTitle, GetFilmByTitleType} from \"./SearchSingleReducer\";\nimport {AppThunk} from \"./Store\";\n\n\nexport type SearchFilmsType = {\n    Title: string\n    Year: string\n    imdbID: string\n    Type: string\n    Poster: string\n}\n\n\nconst initialState: Array<SearchFilmsType> = []\n\n\nexport const SearchAllReducer = (state = initialState, action: GlobalType): Array<SearchFilmsType> => {\n    switch (action.type) {\n        case \"GET-FILMS\":\n            return action.films\n        default :\n            return state\n    }\n}\n\nexport const getFilms = (films: Array<SearchFilmsType>) => {\n    return {\n        type: \"GET-FILMS\",\n        films\n    } as const\n}\n\n\nexport const getAllFilms = (title: string ):AppThunk => {\n    return (dispatch) => {\n        dispatch(setStatusGetFilms(\"loading\"))\n        filmApi.getAllFilms(title)\n            .then(data => {\n                if (data.data.Response === 'True') {\n                    dispatch(setStatusGetFilms(\"success\"))\n                    dispatch(getFilms(data.data.Search))\n                }\n                else  {\n                    dispatch(setStatusGetFilms('failed'))\n                    dispatch(setErrorStatusAC('incorrect request'))\n                }\n            })\n            .catch(() => {\n                dispatch(setStatusGetFilms('failed'))\n                dispatch(setErrorStatusAC('Какая-то неведанная ошибка'))\n            })\n    }\n}\n\n\nexport type GetFilmType = ReturnType<typeof getFilms>\n\n\ntype GlobalType =\n    | SetStatusType\n    | GetFilmByTitleType\n    | GetFilmType\n    |ErrorType\n","import React, {useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport SuperInput from \"../../Utils/SuperInput/SuperInput\";\nimport SuperButton from \"../../Utils/SuperButton/SuperButton\";\nimport {getAllFilms} from \"../../../Redux/SearchAllReducer\";\nimport {setErrorStatusAC} from \"../../../Redux/ErrorReducer\";\nimport s from './SearchAllFilms.module.scss'\n\n\n\nexport const SearchAllFilms = () => {\n\n    const [titleInput, setTitleInput] = useState<string>('')\n\n    const dispatch = useDispatch()\n\n    const onClickHandler = () => {\n        if (titleInput !== '') {\n            dispatch(getAllFilms(titleInput))\n            setTitleInput(\"\")\n        } else {\n            dispatch(setErrorStatusAC('Title is Required'))\n\n        }\n    }\n\n    return (\n        <>\n            <div className={s.SearchAllWrapper}>\n                <p>Do you wanna check more films?</p>\n                <div>\n                    <SuperInput setTitleInput={setTitleInput}\n                                title={titleInput}\n                                callBack={onClickHandler}/>\n                    <SuperButton children={\"Click\"} callBack={onClickHandler}/>\n                </div>\n            </div>\n        </>\n\n    )\n}","import React from 'react';\nimport {SearchSingleFilm} from \"../Search/SearchSingleFilm/SearchSingleFilm\";\nimport {SearchAllFilms} from \"../Search/SearchAllFilms/SearchAllFilms\";\nimport s from './Header.module.scss'\n\n\nconst Header = () => {\n\n\n\n\n    return (\n\n        <header className={s.HeaderWrapper}>\n            <SearchSingleFilm/>\n            <SearchAllFilms/>\n\n        </header>\n\n    );\n}\nexport default Header;","import React from 'react';\nimport {SearchFilmsType} from \"../../../Redux/SearchAllReducer\";\nimport s from '../Main.module.scss'\n\ntype PropsType = {\n    film: SearchFilmsType\n}\n\nconst FilmItem = ({film}: PropsType) => {\n\n\n    return (\n        <li className={s.movie}>\n            <h3>{film.Title}</h3>\n            <img src={film.Poster}/>\n            <div className={s.overview}>\n                <p>{film.Year}</p>\n                <a target={'_blank'} href={`https://www.imdb.com/title/${film.imdbID}/`}>watch</a>\n            </div>\n\n        </li>\n\n\n    );\n};\n\nexport default FilmItem;","export default __webpack_public_path__ + \"static/media/Spinner-1s-200px.7f937069.svg\";","import React from 'react';\r\nimport Preload from '../../../Image/Preloader/Spinner-1s-200px.svg'\r\n\r\nconst Prealoader = () => {\r\n    return <img src={Preload}/>\r\n\r\n    ;\r\n};\r\n\r\nexport default Prealoader;","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport {IblobalStore} from \"../../../Redux/Store\";\nimport {FilmType} from \"../../../Api/Api\";\nimport s from '../Main.module.scss'\n\nconst SingleFilmItem = () => {\n\n    const film = useSelector<IblobalStore, FilmType>\n    (state => state.filmSearch)\n\n    return (\n\n             <div className={s.movie}>\n                <h3>{film.Title}</h3>\n                <img src={film.Poster}/>\n                <div className={s.overview}>\n                    <p>{film.Plot}</p>\n                    <a target={'_blank'} href={`https://www.imdb.com/title/${film.imdbID}/`}>watch</a>\n                </div>\n            </div>\n\n    );\n};\n\nexport default SingleFilmItem;","import React, {useState} from 'react';\nimport s from './Error.module.scss'\nimport SuperButton from \"../Utils/SuperButton/SuperButton\";\n\n\nexport const Error = () => {\n\n    const [open, setOpen] = useState(true)\n\n    return (\n        <>\n        {open && <div className={s.ErrorWrapper}>\n            <h1>Movie not founded ((</h1>\n            <SuperButton  callBack={()=> {setOpen(false)}}>Close</SuperButton>\n        </div>\n        }\n        </>\n    );\n};\n\nexport default Error;","import React, {ChangeEvent, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {IblobalStore} from \"../../Redux/Store\";\nimport {getAllFilms, SearchFilmsType} from \"../../Redux/SearchAllReducer\";\nimport FilmItem from \"./FilmItem/FilmItem\";\nimport s from './Main.module.scss'\nimport Prealoader from \"../Utils/Preloader/Prealoader\";\nimport {FilmType} from \"../../Api/Api\";\nimport SingleFilmItem from \"./SingleFilmItem/SingleFilmItem\";\nimport {InitialStateType} from \"../../Redux/ErrorReducer\";\nimport Error from \"../Error/Error\";\n\n\nconst Main = () => {\n\n    const films = useSelector<IblobalStore, SearchFilmsType[]>(state => state.search)\n    const status = useSelector<IblobalStore, string>(state => state.errorReducer.statusGetFilms)\n\n\n\n    return (\n        <div className={s.mainWrapper}>\n            {status === 'loading' ? <Prealoader/> : null}\n            {status === 'success' ?\n                <main >\n                    <ul>\n                        {\n                            films?.map((film, index) => {\n                                return <FilmItem key={index} film={film}/>\n                            })\n                        }\n                    </ul>\n                   <SingleFilmItem/>\n                </main>\n                : null}\n            {status === 'failed' ? <Error/> : null}\n        </div>\n    )\n};\n\nexport default Main;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from \"./Components/Header/Header\";\nimport Main from \"./Components/MainContent/Main\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Main/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {SearchAllReducer} from \"./SearchAllReducer\";\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\nimport {SearchSingleReducer} from \"./SearchSingleReducer\";\nimport {ErrorReducer} from \"./ErrorReducer\";\n\n\nconst reducers = combineReducers({\n    search:SearchAllReducer,\n    filmSearch:SearchSingleReducer,\n    errorReducer:ErrorReducer\n});\n\nexport type IblobalStore = ReturnType<typeof reducers>\n\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware))\n\n\n\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, IblobalStore, unknown, any>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Redux/Store\";\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n          <Provider store={store}>\n              <App/>,\n          </Provider>\n      </BrowserRouter>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapper\":\"Main_mainWrapper__2SNMk\",\"movie\":\"Main_movie__2icS4\",\"overview\":\"Main_overview__2_T7l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchSingleWrapper\":\"SearchSingle_SearchSingleWrapper__3vdb1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchAllWrapper\":\"SearchAllFilms_SearchAllWrapper__iKLaW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HeaderWrapper\":\"Header_HeaderWrapper__3CO77\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ErrorWrapper\":\"Error_ErrorWrapper__fpKXT\"};"],"sourceRoot":""}